<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- 通过注解配置事务 -->
    <tx:annotation-driven proxy-target-class="true"/>
    
    
	<!--配置数据库连接池Druid-->
  <bean id = "dataSource" class = "com.alibaba.druid.pool.DruidDataSource"destroy-method = "close" >    
       <!-- 数据库基本信息配置 -->  
       <property name = "url" value = "${url}" />    
       <property name = "username" value = "${username}" />    
       <property name = "password" value = "${password}" />    
       <property name = "driverClassName" value = "${driverClassName}" />    
       <property name = "filters" value = "${filters}" />    
        <!-- 最大并发连接数 -->  
       <property name = "maxActive" value = "${maxActive}" />  
       <!-- 初始化连接数量 -->  
       <property name = "initialSize" value = "${initialSize}" />  
       <!-- 配置获取连接等待超时的时间 -->  
       <property name = "maxWait" value = "${maxWait}" />  
       <!-- 最小空闲连接数 -->  
       <property name = "minIdle" value = "${minIdle}" />    
       <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
       <property name = "timeBetweenEvictionRunsMillis" value ="${timeBetweenEvictionRunsMillis}" />  
       <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
       <property name = "minEvictableIdleTimeMillis" value ="${minEvictableIdleTimeMillis}" />    
       <property name = "validationQuery" value = "${validationQuery}" />    
       <property name = "testWhileIdle" value = "${testWhileIdle}" />    
       <property name = "testOnBorrow" value = "${testOnBorrow}" />    
       <property name = "testOnReturn" value = "${testOnReturn}" />    
       <property name = "maxOpenPreparedStatements" value ="${maxOpenPreparedStatements}" />  
       <!-- 打开 removeAbandoned 功能 -->  
       <property name = "removeAbandoned" value = "${removeAbandoned}" />  
       <!-- 1800 秒，也就是 30 分钟 -->  
       <property name = "removeAbandonedTimeout" value ="${removeAbandonedTimeout}" />  
       <!-- 关闭 abanded 连接时输出错误日志 -->     
       <property name = "logAbandoned" value = "${logAbandoned}" />  
  </bean> 
  
  <!--定义实体的工厂bean-->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--实体类位置-->
        <property name="packagesToScan" value="com.citsh.entity"/>
        <!--持久化单元名-->
        <property name="persistenceUnitName" value="TestJPA" />
        <!--JPA提供者-->
        <property name="persistenceProviderClass" value="org.hibernate.ejb.HibernatePersistence"/>
        <!--JPA属性-->
        <property name="jpaProperties">
            <props>
                <!--配置方言-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <!--激活查询日志功能-->
                <prop key="hibernate.show_sql">false</prop>
                <!--优雅地输出Sql-->
                <prop key="hibernate.format_sql">false</prop>
                <!--添加一条解释型标注-->
                <prop key="hibernate.use_sql_comments">false</prop>
                <!--配置如何根据java模型生成数据库表结构,常用update,validate-->
                <prop key="hibernate.hbm2ddl.auto">none</prop>
            </props>
        </property>
    </bean>
    
     <!--定义事务管理器-->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>
    
    <!--定义repository接口的存放目录-->
    <!--定义接口实现的后缀，通常用Impl-->
    <!--定义实体工厂的引用-->
    <!--定义事务管理器的引用-->
    <jpa:repositories base-package="com.citsh.repository"
                      repository-impl-postfix="Impl"
                      entity-manager-factory-ref="entityManagerFactory"
                      transaction-manager-ref="transactionManager"/>

    <!--第五步-->
    <!--声明采用注解的方式申明事务-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- 解析properties，创建dataSource -->
<!-- 	<bean id="dataSourceService" class="com.mossle.core.jdbc.DataSourceServiceFactoryBean">
		<property name="properties" ref="applicationProperties"/>
		<property name="defaultPrefix" value="db"/>
	</bean> -->

	<!-- 默认的dataSource -->
	<!-- <bean id="dataSource" factory-bean="dataSourceService" factory-method="getDataSource"/> -->

	<!-- jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" depends-on="databaseMigrator">
        <property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 自动初始化数据库 -->
<!-- 	<bean id="databaseMigrator" class="com.mossle.core.dbmigrate.DatabaseMigrator" depends-on="hsqldbServer">
		<property name="dataSource" ref="dataSource"/>
		<property name="enabled" value="${dbmigrate.enabled}"/>
		<property name="clean" value="${dbmigrate.clean}"/>
	</bean> -->

	<!-- 测试用的hsqldb数据库 -->
<!-- 	<bean id="hsqldbServer" class="com.mossle.simulator.hsqldb.HsqldbServer">
		<property name="enabled" value="${hsqldb.enabled}"/>
		<property name="username" value="${hsqldb.username}"/>
		<property name="password" value="${hsqldb.password}"/>
		<property name="port" value="${hsqldb.port}"/>
		<property name="path" value="${hsqldb.path}"/>
		<property name="databaseName" value="${hsqldb.databaseName}"/>
	</bean> -->
</beans>
